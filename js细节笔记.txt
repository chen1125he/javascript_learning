2.	Javascript区分大小写
3.	Js中未用var定义的变量会成为全局变量即使在一个方法中用到的未用var定义变量在后面的方法里面都能使用
4.	Typeof()的值有undefined/Boolean/string/number/object(是个对象或者null)/function
声明了未赋值就是undefined(一定要先声明，未声明就是报错)
5.	任何类型都有和boolean相匹配的值，数字false是0和NaN，string的false是空串object的false是null
6.	Number类型可以有8进制和16进制(0/0x)
7.	NaN是一个特殊的数值任何涉及NaN的操作都会返回NaN  另NaN不等于NaN
8.	数字转换成字符串的可以和三个Number,parseInt(), parseFloat
Number() Boolean => 0/1, null => 0, undefined => NaN 没有八进制，十六进制会直接转换成同值的十进制
parseInt 有八进制从前向后读取，还可以带两个参数parseInt(‘AF’, 16)指定进制，这时候前面可以不带进制标志
9.	在调用数值型的toString()方法可以在括号里面加个参数，参数是进制
Undefined和null是没有toString()方法的，可以用String(undefined)和String(null)去转换
10.parents和closest相似都是找父级元素，前者返回集合，后者返回单个元素

11.如果数值计算的结果超过了ECMAScript的表示范围，那么结果是Infinity或者是-Infinity(与0相乘是NaN),正Infinity相加是Infinity，负则负，正负相加则是NaN，减法相当于+负的 Infinity

12.字符串的大小比较是比较编码数值，字符串与数值的比较会先转换字符串到数字

13.全等于和不全等于
	5 == "5" // true
	5 === "5" // false 数据类型不等
	5 !== "5" // true

14.逗号操作符
	执行多个操作，并返回最后一个操作的值
	也可以用于声明多个变量
	
15.for-in
	for(property in expression){}
	迭代，可以枚举一个对象里面所有的值,这个值是属性名或者是数组的索引
	var arr = [1, 2, 3, 4, 5, 7, 8];
		Array.prototype.name = "ccyy";
		for(var a in arr){
			console.log(a, arr[a]);
		}//会多输入一个name属性来，但name却并不是arr的属性，这里可以用arr.hasOwnProperty(),这个方法只会判断是不是自己对象的属性，如果只是prototype里面的，判断为false
		 //in会判断是不是有这个属性(strPropertyName in Object),实例和原型都会去找
		 //for-in实例和原型中可以通过对象访问的属性和方法都会被遍历出来

16.with，将代码的作用域设置到一个特定的对象中，简化多次编写同一个对象的工作,严格模式下不允许使用，这个好像没多大用
	var qs = location.search.substring(1)
	var hn = location.hostname
	var url = location.href
	=>
	with(location){
		var qs = search.substring(1)
		...
	}
	
17.js的函数不在乎被传递多少参数，传递或者不传递参数，甚至不按定义那样传递参数，即使没有定义参数，也可以传递参数进去
	函数内部有一个arguments，与数组类似，可以用arguments[num]来访问参数，因而它的特点是，参数的命名只是提供便利，但不是必需的
	
18.引用类型变量是object，把一个引用类型变量赋值给另一个变量，他们两个就都指向同一个对象了，不过它们俩各自都是有着自身变量的空间
	小陷阱
	function setName(obj){
		obj.name = "Nicolas";
		obj = new Object();
		obj.name = "Greg";
	}
	var person = new Object();
	setName(person);
	person.name // 依然是"Nicolas"
	
19.作用域链
	局部变量想作用到其他域，可以用1.with, 2.try-catch
	
	js的作用域和c不太相同在for循环和if里面定义的变量还是可以作用到其他地方的, while,do-while也是可以的, switch-case里面也是可以的
	function func(num1, num2){
		sum = num1 + num2; // 如果这个sum没有加var去初始化，那么是可以在外部被访问到的，加了则不行，不过如果在stric模式下会报错
		return sum
	}
	
20.新建一个引用类型变量
	var person = {"name" : "Nicolas", 5 : true, c : 'name'}
	var person = new Object();
	
	访问属性可以用person.name，也可以用person['name'],如果属性名中间带了空格 "na me"就不能用.访问了
	如果是数字，可以用person[5]也可以用person['5'],  像里面的c会自动转化成字符串只能person.c或者person['c'], 不能person[c]
	
21.对于数组来说，arr.length不是只读的可以手动修改的，可以用来一移除后面的值，也可以用来增加数组空间
	arr[arr.length] = value 可以直接在数组末尾添加一个值
	
22.函数也算是对象，可以赋值给另外一个变量
	function fun_a(num){
		return num + 1
	}
	function fun_a(num){
		return num + 2
	}
	这里是想做重载，但实际上会是将fun_a再一次赋值另一个函数
	
23.var fun = function(){}
	function fun(){}
	这两个是不一样的
	第二种对顺序没有要求，不论写在哪都可以，因为一开始会有一个名为函数声明提升的过程，将函数声明添加到执行环境中
	第一个只相当一个变量，运行到这的时候函数才会存在
	这两种的写法区别只在这，什么时候可以调用函数
	也可以这样写，var sum = function sum(){}	//safari会不支持
	但这种也不能在之前就调用这个函数
	sum是这个函数，sum()是这个函数值
	
	函数也是对象，可以拥有方法
	
24.Boolean类型
	bool对象和bool类型是两种概念
	var falseObject = new Boolean(false)
	falseObject && true => true //bool对象在表达式中代码的永远是true
	false instanceof Boolean => false
	falseObject instanceof Boolean => true
	typeof(falseObject) => object 	//是对象
	typeof(false) => boolean	//是boolean类型
25.同Boolean类型一样，Number类型也重写了valueOf(), toLocalString()和toString()
	number.toString()可以传递
	number.toFixed(),可以转换成保留传入参数的小数位数的字符串，会四舍五入
	
26.String
	str.length,返回字符串长度
	str.charAt(position)// 也可以用str[postion]
	str.charCodeAt(postion)//返回编码
	String.fromCharCode(intCode1[, intCode2])//返回字符串，String的静态方法
	str.concat(str1, str2)//会返回拼接的字符串，原串不变
	str.substr(startPosition[, length])//字符串截取，如果长度是负，那会转成0,开始位置是负数的话，length+(负数)
	str.substring(startPosition[, endPosition])//字符串截取，两个可以输入负数，但会转换成0，会比较开始和结束位置，自动把大的那个数作为开始位置
	str.slice(startPosition[, endPosition])//负数会的方法是length+(负数)
	
	str.indexOf(str[, startPosition])
	str.lastIndexOf(str[, startPosition])
	
	可以通过改变position的值，循环出一个字符串中被查找的字符串所有的位置
	var positions = [];
	var pos = stringValue.indexOf("e");
	while(pos > -1){
		position.push(pos);
		pos = stringValue.indexOf("e", pos+1)
	}
	
	str.trim()	//删除前后前格
	
	str.toLowerCase()//大小写转换
	str.toUpperCase()
	
	str.match(pattern)和exec相似，返回的是第一次匹配到的串，数组里面的是分组，
	str.search(pattern),查找位置
	str.replace(/sd/g, "")//带了g可以替换全局, 可以用$num引用分组($0好像没用？chorm)，$$才是美元符号， $'匹配到子串之前的字符串， $`匹配到子串之后的字符串， $&整个匹配到的子字符串
		str.replace(pattern, function(matchedString, position, originalText){})
	str.split(string/pattern),若分隔符号出现在最左或者最右，那么也会多出一个空串
	str.localeCompare(str2)//比的是谁在谁后面
27.Global对象
	encodeURI()/decodeURI() //处理空格
	encodeURIComponent()/decodeURICompontent()//处理非数字字母字符
	
	eval() //是个解析器，可以把js的表达式的字符串运行
	
	Math.PI	//
	Math.max/min()	//不是传数组
	Math.ceil()		//向上舍入
	Math.floor()	//向下舍入
	Math.round()	//四舍五入
	
	Math.random() * max => (0, max); 
		Math.floor(Math.random() * 可能值的总数 + 第一个可能的值) 比如1-100 Math.random() * 100 => (0, 100) + 1 => (1, 101)再向下舍
	
	Math.abs(num) //绝对值
	Math.exp(num) //返回Math.E的num次幂
	Math.log(num) //返回num的自然对数
	Math.pow(num, power) //返回num的power的次幂
	Math.sqrt(num) //返回num的平方根
	Math.sin()/cos()/tan()	//
	
28.Object	
	带_year可以表示只能通过方法访问的属性
	var person = {
		name: 'Nicolas',
		age: '29',
		job: 'SoftWare Engineer',
		
		sayName: function(){
			console.log(this.name);
		}
	}
	
	Object.defineProperty(person, "hobby", {
		writable: false,	// 是否能修改属性的值,设置成false就不能修改了,严格模式下赋值会报错 default: true
		value: '',			// 默认值
		configurable: false,// 是否能通过delete删除属性，能否重新定义属性 default: true
		enumerable: false	// 是否能通过for-in循环返回属性 default: true
	});//如果configurable false, 则不能使用些方法重复定义同一个对象的同一个属性，否则会报错
	
	访问器
	Object.defineProperty(person, "hobby", {	(这个问题似乎是因为writable的问题，好像它的默认是false, 通过defineProperty指定的，它的默认就是false。通过初始化指定的默认是true)
		configurable: false,	//是否能通过delete删除属性，能否重新定义属性 default: true
		enumerable: false, 		//能否通过for-in循环返回属性， default: true
		set: function(newValue){	//没有制定尝试写入就会报错
			this._hobby = newValue;
		},
		get: function(){			//没有指定就是undefined，严格模式下会报错
			return this._hobby
		}
	}
	
	定义多个属性
	Object.defineProperties(person, {
		_hobby:{
			value: "game"
		},
		hobby:{
			get: function(){
				return this._hobby;
			},
			set: function(newValue){
				this._hobby = newValue;
			}
		}
	})
	
	构造函数(1)
		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function(){
				console.log(this.name);
			}
		}
		var cyy = new Person("cyy", 21, "PG");
		console.log(cyy.name);
		任何函数只要通过new调用就会变成构造函数
		如果直接调用Person("cyy", 21, "PG");
		就是会添加到window
		也可以通过call/apply来调用
		var o = new Object();
		Person.call(o, "cyy", 21, "PG");
		
		prototype添加的方法，即使是在new完一个对象后添加的，这个对象也可以使用的(5)
		也可以通过prototype去修改原来的方法，也可以通过delete Object.prototype.delete去删除这个方法, 删除之后再调用会报错
		
		使用prototype会很灵活所以需要注意它会不会有问题，if(obj.functionName) 判断方法存在不存在
		也可能会改变方法以及属性，因为某个特殊的对象去改变方法属性而影响到了其他对象的方法及属性
		
		※原型属性是共享的，一个实例的属性(只有引用类型)改变了(如arr.push(1))，其他实例的属性(只有引用类型)也会跟着改变的(写在原构造方法里面的不会影响,所以最好写在构造方法里面)，如果是更换值不会，如把arr => num
		但如果是继承而来的话，
			function SuperType(){
				this.arr = [11, 22, 33, 44];
			}
			function SubType(){
			}
			SubType.prototype = new SuperTyp();
			这时arr对于SubType来说就是SubType.prototype.arr，也是会被共享的
		
		如果某个对象添加了一个类中同名的方法，算是重写吧，但原来的prototype里面的方法仍然存在，但会先去对象里面找这个方法然后调用，但如果delete了，就可以再次去调用prototype的方法了
		
		重写原型
		另一种写法，这种写法不会立即应用到在这表达式之前创建的实例中，而是后面创建的实例才会存在(在重写之前创建的对象，它的prototype还是指的原prototype)
		而且它的constructor不再指向Person,不过instanceof还是可以的
		原先的构造函数中方法还是存在的,但再次定义的会把之前定义的prototype给替换掉
		
		obj.constructor
		Person.prototype = {//(2)
			[constructor: Person,]//原本不可以枚举的现在可以枚举了，但可以通过Object.defineProperty(Person.prototype, "constructor", {enumerable: false})
			name: '',
			sayName: function(){
				
			}
		}
		
		
	工厂模式(3)
		function createPerson(name, age, job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				console.log(this.name);
			}
			return o;
		}
		
	Object.keys(Person.prototype)//可以获取字符串数组(可枚举的属性)
	Object.getOwnPropertyNames(Person.prototype)//直接获取所有，不论是否可枚举
	
	动态原型模式(4)
	function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function(){
				console.log(this.name);
			}
			if(typeof this.sayName != "function"){//通过检查某个应该存在的方法是否有效来决定是否需要初始化原型
				Person.prototype.sayName = function(){
					console.log(this.name);
				}
			}
		}
	寄生构造函数模式(6)
	和工厂模式类似也和构造方法类似，构造方法会自动返回构造的对象，也可以用过return改写返回的值
	但是是通过new出来的，用处嘛，像是给已有的类(如Array)创建一个具有某些特殊方法的对象
		function SpecialArray(){
			var values = new Array();
			values.push.apply(values, arguments);
			values.toPipedString = function(){
				return this.join("|");
			}
			return values;
		}
		var colors = new SpecialArray("red", "blue", "green");
		colors.toPipedString()
		
	稳妥构造函数模式(7)
		没有公共属性，其方法也不引用this的对象，与寄生相似，但不用new
		可以添加方法，但不可能通过添加的方法访问到创建时候的原始数据
		function Person(name, age, job){
			var o = new Object();
			o.hobby = "";
			
			o.sayName = function(){
				return name;
			}
			
			return o;
		}
		var o = Person("Nicolas", 29, "pg");
		friend.sayName();
		
	原生对象(String, Array, Object)
	
29.继承
	原型链//所有原型都会继承自Object.prototype,找方法会先去找实例，再找原型，再找链的上一个实例，再找原型
		Student.prototype = new Person("Hanhan", 21, 30);//实质是替换原型
		var stu = new Student();	//继承了//如果有和super相同的方法，那是方法的重写，目前还不知道怎么去调用super方法//如果重写的方法被删除，那就会调用到原方法
		
		stu.sayName.call(new Person("Hh", 21, 30));//被重写的方法//如果这样调用，那只会更新stu的person属性，方法依然是stu的方法
		如果再用Student.prototype={}的话原来的就会被替换掉
		
		person = new Person("Hanhan", 21, 30);
		Student.prototype = person;
		HighStudent.prototype = new Student();
		highStu = new HighStudent();
		stu = new Student();
		person = new Person();
		console.log(highStu.constructor);
		console.log(stu.constructor);
		console.log(person.constructor);
		//三个constructor都是Person,constructor里面的是一个指针，指向propotype所在的函数，因为prototype都是指向了另一个对象的原型，最终是Person.prototype的原型,
		//highStu instanceof Person //true
		//highStu instanceof Student //true
		//highStu instanceof HighStudent //true
		
	借用构造函数
		function SuperType(name){
			this.colors = ["red", "blue", "green"];
			this.name = name;
		}
		function SubType(){
			SuperType.call(this, name);//实际是在(未来将要)新创建的实例下调用了SuperType的构造方法，※这样就会在SubType对象上执行SuperType()函数中定义的所有对象初始化代码
			//这种调用，实例间对引用类型的属性不会互相影响
		}
		subType = new SubType();
	
	组合继承//调用两次超类
		用构造方法继承属性，使每个实例拥有自己的属性
		用原型来继承方法
		
	原型式继承//在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持相似的情况下，原型式继承是完全可以胜任的
		Object.create(obj) => function obj(o){
											function F(){}
											F.prototype = o;
											return new F();
							}
			Object.create(obj, {
				name: 'Greg'
			})
	寄生式继承//和寄生式构造函数和工厂模式类似
	
	
	寄生组合式继承		
		
		
30.函数 
	(1)	sayHi();
		function sayHi() {}
	(2)	sayHi();	//这样调用会报错
		var sayHi = function(){}
	(3)	say();		//这样调用也会报错的
		var sayHi = function say(){}	//这样赋值是ok的
	
	
32.闭包
	闭包是指有权访问另一个函数作用域中的变量的函数。(函数嵌套的时候，内层函数可以访问外层函数里面的变量)
	闭包会包含外部函数的变量什么的，会占用更大的内存，因而慎用
	闭包需要其他使用者不能知道闭包的细节
	闭包的代码参考Array的sort()
33.闭包与变量
	闭包只能取得包含函数中任何变量的最后一个值
	function createFunctions(){
		var result = new Array();
		for (var i=0; i < 10; i++){
			result[i] = function(){
				return i;
			}
		}
		i = 13;
		return result;
	}
	res = createFunctions();
	console.log(res[5]());
	//像是这里面的，每个函数里面的返回的都是13
	
	function createFunctions2(){
			var result = new Array();
			for(var i = 0; i < 10; i++){
				result[i] = function(num){
					return function(){
						return num;
					}
				}(i);//还有这种操作？
			}
			return result;
		}//这个写法可以达到上面的预期
		
		//上面的写法可以相当于声明一个函数，声明完了之后也会把这个函数返回，再通过()括号就可以调用了
		
34.this对象
	var name = "The Window"
	var object = {
		name: 'My Object',
		
		getNameFunc: function(){
			return function(){
				return this.name;
			}
		}
	}
	
	console.log(object.getNameFunc()())//The Window
	
	闭包内访问不到object对象，闭包内的只能访问外部函数的变量，如果把this保存到外部函数里面就可以访问得到啦
	getNameFunc: function(){
		that = this;
		return function(){
			return that.name;
		}
	}
	
	var object = {
		name: 'My Object',
		getName: function(){
			return this.name;
		}
	}
	object.getName(); 	//"My Object";
	(object.getName = object.getName)();	//"The Window"
	第二次这个赋值操作会返回一个函数，但已经没有对象了，所以没有this，对应的对象也就是window了
	
35.内存溢出
	如果闭包的作用域链中保存着一个html元素，那么就意味着该元素无法被销毁
	function assignHandler(){
		var element = document.getElementById("someElement");
		element.onclick = function(){
			console.log(element.id)
		}
	}
	//这样就可以解决，具体是什么意思以后再了解吧
	function assignHandler(){
		var element = document.getElementById("someElement");
		var id = element.id
		element.onclick = function(){
			console.log(id);
		}
	}
36.块级作用域，像c,java里面for(var i = 0; i < 10; i++){}里面的i就是在块级作用域里面，如果在for的外面，是调用不到这个i的
	js模仿块级作用域
		(function(){
			//块级作用域
		})();//这里的处理是相当于定义一个匿名函数，然后立即调用(包裹函数的括号是不允许去掉的，函数声明后面是不能跟小括号的，但被包起来的函数就是一个函数表达式了)
			//这样就可以用一些临时变量了
			
37.私有变量，任何函数中定义的变量都可以是私有变量，因为不能在外部去访问它们
	但可以通过闭包去访问
	
	访问私有变量和私有函数的公有方法称为特权方法